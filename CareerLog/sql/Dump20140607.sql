CREATE DATABASE  IF NOT EXISTS `careerlog` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `careerlog`;
-- MySQL dump 10.13  Distrib 5.6.13, for Win32 (x86)
--
-- Host: localhost    Database: careerlog
-- ------------------------------------------------------
-- Server version	5.6.16-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `message_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `score` int(11) NOT NULL,
  `text` blob NOT NULL,
  `creationDate` datetime NOT NULL,
  `UserDisplayName` varchar(50) NOT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `user_id` (`user_id`),
  KEY `message_id` (`message_id`),
  CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comments_ibfk_2` FOREIGN KEY (`message_id`) REFERENCES `messages` (`message_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `friends`
--

DROP TABLE IF EXISTS `friends`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `friends` (
  `user_id` int(11) NOT NULL,
  `friend_id` int(11) NOT NULL,
  PRIMARY KEY (`user_id`,`friend_id`),
  KEY `friend_id` (`friend_id`),
  CONSTRAINT `friends_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `friends_ibfk_2` FOREIGN KEY (`friend_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `friends`
--

LOCK TABLES `friends` WRITE;
/*!40000 ALTER TABLE `friends` DISABLE KEYS */;
INSERT INTO `friends` VALUES (2,1),(1,2),(2,2);
/*!40000 ALTER TABLE `friends` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `locations`
--

DROP TABLE IF EXISTS `locations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `locations` (
  `location_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `country_code` char(2) DEFAULT NULL,
  `state` varchar(50) DEFAULT NULL,
  `city` varchar(50) DEFAULT NULL,
  `street` varchar(50) DEFAULT NULL,
  `post_code` char(6) DEFAULT NULL,
  PRIMARY KEY (`location_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `locations_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `locations`
--

LOCK TABLES `locations` WRITE;
/*!40000 ALTER TABLE `locations` DISABLE KEYS */;
/*!40000 ALTER TABLE `locations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `messages`
--

DROP TABLE IF EXISTS `messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `messages` (
  `message_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(100) DEFAULT NULL,
  `text` blob NOT NULL,
  `creation_date` datetime NOT NULL,
  `last_edit_date` datetime DEFAULT NULL,
  `tags` varchar(50) DEFAULT NULL,
  `view_count` int(11) NOT NULL,
  `score` int(11) NOT NULL,
  `comment_count` int(11) NOT NULL,
  `parent_id` int(11) DEFAULT NULL,
  `message_type_id` varchar(10) DEFAULT NULL,
  `user_name` varchar(50) NOT NULL,
  PRIMARY KEY (`message_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `messages_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `messages`
--

LOCK TABLES `messages` WRITE;
/*!40000 ALTER TABLE `messages` DISABLE KEYS */;
INSERT INTO `messages` VALUES (1,1,'this is my first post','<p>Hi every one, this is my first post at CareerLog. i created this web for sharing the skills and helping others for the problems they meet.</p>\r\n\r\n<p>You can also posts the events of your career, let more people have a deep understand about you and your career.</p>\r\n\r\n<p>Peace.</p>\r\n','2014-02-17 14:46:05',NULL,NULL,0,0,0,0,'log','leonliusha'),(2,2,'this is jiaojiao \'s first post','<p>this is jiaojiao&#39;s first post.</p>\r\n\r\n<p>&nbsp;</p>\r\n','2014-02-17 15:08:52',NULL,NULL,0,0,0,0,'log','jiaojiao'),(3,1,'JSP & JSTL','<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<p>The form tag library comes bundled in <code>spring-webmvc.jar</code>. The library descriptor is called <code>spring-form.tld</code>.</p>\r\n\r\n<p>To use the tags from this library, add the following directive to the top of your JSP page:</p>\r\n\r\n<pre>\r\n&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</pre>\r\n\r\n<p>... where <code>form</code> is the tag name prefix you want to use for the tags from this library.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<h4 style=\"text-align:start\">16.2.4.2&nbsp;The <code>form</code> tag</h4>\r\n\r\n<h2 style=\"font-style:normal; text-align:start\">&nbsp;</h2>\r\n\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div style=\"background-color: inherit;\">&nbsp;</div>\r\n\r\n<p>This tag renders an HTML &#39;form&#39; tag and exposes a binding path to inner tags for binding. It puts the command object in the <code>PageContext</code> so that the command object can be accessed by inner tags. <em>All the other tags in this library are nested tags of the <code>form</code> tag</em>.</p>\r\n\r\n<p>Let&#39;s assume we have a domain object called <code>User</code>. It is a JavaBean with properties such as <code>firstName</code> and <code>lastName</code>. We will use it as the form backing object of our form controller which returns <code>form.jsp</code>. Below is an example of what <code>form.jsp</code> would look like:</p>\r\n\r\n<pre>\r\n&lt;form:form&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;lastName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;2&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n\r\n<p>The <code>firstName</code> and <code>lastName</code> values are retrieved from the command object placed in the <code>PageContext</code> by the page controller. Keep reading to see more complex examples of how inner tags are used with the <code>form</code> tag.</p>\r\n\r\n<p>The generated HTML looks like a standard form:</p>\r\n\r\n<pre>\r\n&lt;form method=&quot;POST&quot;&gt;\r\n      &lt;table&gt;\r\n        &lt;tr&gt;\r\n            &lt;td&gt;First Name:&lt;/td&gt;\r\n            &lt;td&gt;&lt;input name=&quot;firstName&quot; type=&quot;text&quot; value=&quot;Harry&quot;/&gt;&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;td&gt;Last Name:&lt;/td&gt;\r\n            &lt;td&gt;&lt;input name=&quot;lastName&quot; type=&quot;text&quot; value=&quot;Potter&quot;/&gt;&lt;/td&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;td colspan=&quot;2&quot;&gt;\r\n              &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n            &lt;/td&gt;\r\n        &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form&gt;</pre>\r\n\r\n<p>The preceding JSP assumes that the variable name of the form backing object is <code>&#39;command&#39;</code>. If you have put the form backing object into the model under another name (definitely a best practice), then you can bind the form to the named variable like so:</p>\r\n\r\n<pre>\r\n&lt;form:form commandName=&quot;user&quot;&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;lastName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;2&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n</div>\r\n</div>\r\n</div>\r\n','2014-02-17 15:27:18',NULL,NULL,0,0,0,0,'log','leonliusha'),(4,1,'The input tag','<h2 style=\"font-style:normal; text-align:start\">&nbsp;</h2>\r\n\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<p>This tag renders an HTML &#39;input&#39; tag with type &#39;text&#39; using the bound value. For an example of this tag, see <a href=\"http://docs.spring.io/spring/docs/3.0.x/spring-framework-reference/html/view.html#view-jsp-formtaglib-formtag\" style=\"background-color: inherit; cursor: pointer;\" title=\"16.2.4.2&nbsp;The form tag\">Section&nbsp;16.2.4.2, &ldquo;The form tag&rdquo;</a>.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<h4 style=\"text-align:start\">16.2.4.4&nbsp;The <code>checkbox</code> tag</h4>\r\n\r\n<h2 style=\"font-style:normal; text-align:start\">&nbsp;</h2>\r\n\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div style=\"background-color: inherit;\">&nbsp;</div>\r\n\r\n<p>This tag renders an HTML &#39;input&#39; tag with type &#39;checkbox&#39;.</p>\r\n\r\n<p>Let&#39;s assume our <code>User</code> has preferences such as newsletter subscription and a list of hobbies. Below is an example of the <code>Preferences</code> class:</p>\r\n\r\n<pre>\r\npublic class Preferences {\r\n\r\n      private boolean receiveNewsletter;\r\n\r\n      private String[] interests;\r\n\r\n      private String favouriteWord;\r\n\r\n      public boolean isReceiveNewsletter() {\r\n          return receiveNewsletter;\r\n      }\r\n\r\n      public void setReceiveNewsletter(boolean receiveNewsletter) {\r\n          this.receiveNewsletter = receiveNewsletter;\r\n      }\r\n\r\n      public String[] getInterests() {\r\n          return interests;\r\n      }\r\n\r\n      public void setInterests(String[] interests) {\r\n          this.interests = interests;\r\n      }\r\n\r\n      public String getFavouriteWord() {\r\n          return favouriteWord;\r\n      }\r\n\r\n      public void setFavouriteWord(String favouriteWord) {\r\n          this.favouriteWord = favouriteWord;\r\n      }\r\n  }</pre>\r\n\r\n<p>The <code>form.jsp</code> would look like:</p>\r\n\r\n<pre>\r\n&lt;form:form&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Subscribe to newsletter?:&lt;/td&gt;\r\n              &lt;%-- Approach 1: Property is of type java.lang.Boolean --%&gt;\r\n              &lt;td&gt;&lt;form:checkbox path=&quot;preferences.receiveNewsletter&quot;/&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Interests:&lt;/td&gt;\r\n              &lt;td&gt;\r\n                  &lt;%-- Approach 2: Property is of an array or of type java.util.Collection --%&gt;\r\n                  Quidditch: &lt;form:checkbox path=&quot;preferences.interests&quot; value=&quot;Quidditch&quot;/&gt;\r\n                  Herbology: &lt;form:checkbox path=&quot;preferences.interests&quot; value=&quot;Herbology&quot;/&gt;\r\n                  Defence Against the Dark Arts: &lt;form:checkbox path=&quot;preferences.interests&quot;\r\n                      value=&quot;Defence Against the Dark Arts&quot;/&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Favourite Word:&lt;/td&gt;\r\n              &lt;td&gt;\r\n                  &lt;%-- Approach 3: Property is of type java.lang.Object --%&gt;\r\n                  Magic: &lt;form:checkbox path=&quot;preferences.favouriteWord&quot; value=&quot;Magic&quot;/&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n\r\n<p>There are 3 approaches to the <code>checkbox</code> tag which should meet all your checkbox needs.</p>\r\n\r\n<div style=\"background-color: inherit;\">\r\n<ul>\r\n	<li>\r\n	<p>Approach One - When the bound value is of type <code>java.lang.Boolean</code>, the<code>input(checkbox)</code> is marked as &#39;checked&#39; if the bound value is <code>true</code>. The <code>value</code> attribute corresponds to the resolved value of the <code>setValue(Object)</code> value property.</p>\r\n	</li>\r\n	<li>\r\n	<p>Approach Two - When the bound value is of type <code>array</code> or <code>java.util.Collection</code>, the <code>input(checkbox)</code> is marked as &#39;checked&#39; if the configured <code>setValue(Object)</code> value is present in the bound <code>Collection</code>.</p>\r\n	</li>\r\n	<li>\r\n	<p>Approach Three - For any other bound value type, the <code>input(checkbox)</code> is marked as &#39;checked&#39; if the configured <code>setValue(Object)</code> is equal to the bound value.</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<p>Note that regardless of the approach, the same HTML structure is generated. Below is an HTML snippet of some checkboxes:</p>\r\n\r\n<pre>\r\n&lt;tr&gt;\r\n      &lt;td&gt;Interests:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          Quidditch: &lt;input name=&quot;preferences.interests&quot; type=&quot;checkbox&quot; value=&quot;Quidditch&quot;/&gt;\r\n          &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;_preferences.interests&quot;/&gt;\r\n          Herbology: &lt;input name=&quot;preferences.interests&quot; type=&quot;checkbox&quot; value=&quot;Herbology&quot;/&gt;\r\n          &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;_preferences.interests&quot;/&gt;\r\n          Defence Against the Dark Arts: &lt;input name=&quot;preferences.interests&quot; type=&quot;checkbox&quot;\r\n              value=&quot;Defence Against the Dark Arts&quot;/&gt;\r\n          &lt;input type=&quot;hidden&quot; value=&quot;1&quot; name=&quot;_preferences.interests&quot;/&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p>What you might not expect to see is the additional hidden field after each checkbox. When a checkbox in an HTML page is <em>not</em> checked, its value will not be sent to the server as part of the HTTP request parameters once the form is submitted, so we need a workaround for this quirk in HTML in order for Spring form data binding to work. The <code>checkbox</code> tag follows the existing Spring convention of including a hidden parameter prefixed by an underscore (&quot;_&quot;) for each checkbox. By doing this, you are effectively telling Spring that &ldquo; <em>the checkbox was visible in the form and I want my object to which the form data will be bound to reflect the state of the checkbox no matter what</em> &rdquo;<code>.</code></p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<h4 style=\"text-align:start\">&nbsp;</h4>\r\n','2014-02-17 15:28:23',NULL,NULL,0,0,0,0,'log','leonliusha'),(5,1,'The checkboxes tag','<p style=\"text-align:start\">This tag renders multiple HTML &#39;input&#39; tags with type &#39;checkbox&#39;.</p>\r\n\r\n<p style=\"text-align:start\">Building on the example from the previous <code>checkbox</code> tag section. Sometimes you prefer not to have to list all the possible hobbies in your JSP page. You would rather provide a list at runtime of the available options and pass that in to the tag. That is the purpose of the <code>checkboxes</code> tag. You pass in an <code>Array</code>, a <code>List</code> or a <code>Map</code> containing the available options in the &quot;items&quot; property. Typically the bound property is a collection so it can hold multiple values selected by the user. Below is an example of the JSP using this tag:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form:form&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Interests:&lt;/td&gt;\r\n              &lt;td&gt;\r\n                  &lt;%-- Property is of an array or of type java.util.Collection --%&gt;\r\n                  &lt;form:checkboxes path=&quot;preferences.interests&quot; items=&quot;${interestList}&quot;/&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n\r\n<p style=\"text-align:start\">This example assumes that the &quot;interestList&quot; is a <code>List</code> available as a model attribute containing strings of the values to be selected from. In the case where you use a Map, the map entry key will be used as the value and the map entry&#39;s value will be used as the label to be displayed. You can also use a custom object where you can provide the property names for the value using &quot;itemValue&quot; and the label using &quot;itemLabel&quot;.</p>\r\n','2014-02-17 15:29:01',NULL,NULL,0,0,0,0,'log','leonliusha'),(6,1,'The radiobutton tag','<h2 style=\"font-style:normal; text-align:start\">&nbsp;</h2>\r\n\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<p>This tag renders an HTML &#39;input&#39; tag with type &#39;radio&#39;.</p>\r\n\r\n<p>A typical usage pattern will involve multiple tag instances bound to the same property but with different values.</p>\r\n\r\n<pre>\r\n&lt;tr&gt;\r\n      &lt;td&gt;Sex:&lt;/td&gt;\r\n      &lt;td&gt;Male: &lt;form:radiobutton path=&quot;sex&quot; value=&quot;M&quot;/&gt; &lt;br/&gt;\r\n          Female: &lt;form:radiobutton path=&quot;sex&quot; value=&quot;F&quot;/&gt; &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<h4 style=\"text-align:start\">16.2.4.7&nbsp;The <code>radiobuttons</code> tag</h4>\r\n\r\n<h2 style=\"font-style:normal; text-align:start\">&nbsp;</h2>\r\n\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div lang=\"en\" style=\"background-color: inherit;\">\r\n<div style=\"background-color: inherit;\">&nbsp;</div>\r\n\r\n<p>This tag renders multiple HTML &#39;input&#39; tags with type &#39;radio&#39;.</p>\r\n\r\n<p>Just like the <code>checkboxes</code> tag above, you might want to pass in the available options as a runtime variable. For this usage you would use the <code>radiobuttons</code> tag. You pass in an <code>Array</code>, a <code>List</code> or a <code>Map</code> containing the available options in the &quot;items&quot; property. In the case where you use a Map, the map entry key will be used as the value and the map entry&#39;s value will be used as the label to be displayed. You can also use a custom object where you can provide the property names for the value using &quot;itemValue&quot; and the label using &quot;itemLabel&quot;.</p>\r\n\r\n<pre>\r\n&lt;tr&gt;\r\n      &lt;td&gt;Sex:&lt;/td&gt;\r\n      &lt;td&gt;&lt;form:radiobuttons path=&quot;sex&quot; items=&quot;${sexOptions}&quot;/&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n</div>\r\n</div>\r\n</div>\r\n','2014-02-17 15:29:19',NULL,NULL,0,0,0,0,'log','leonliusha'),(7,1,'The password tag','<p style=\"text-align:start\">This tag renders an HTML &#39;input&#39; tag with type &#39;password&#39; using the bound value.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Password:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;form:password path=&quot;password&quot; /&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p style=\"text-align:start\">Please note that by default, the password value is <em>not</em> shown. If you do want the password value to be shown, then set the value of the <code>&#39;showPassword&#39;</code> attribute to true, like so.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Password:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;form:password path=&quot;password&quot; value=&quot;^76525bvHGq&quot; showPassword=&quot;true&quot; /&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n','2014-02-17 15:29:36',NULL,NULL,0,0,0,0,'log','leonliusha'),(8,1,'The select tag','<p style=\"text-align:start\">This tag renders an HTML &#39;select&#39; element. It supports data binding to the selected option as well as the use of nested <code>option</code> and <code>options</code> tags.</p>\r\n\r\n<p style=\"text-align:start\">Let&#39;s assume a <code>User</code> has a list of skills.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Skills:&lt;/td&gt;\r\n      &lt;td&gt;&lt;form:select path=&quot;skills&quot; items=&quot;${skills}&quot;/&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p style=\"text-align:start\">If the <code>User&#39;s</code> skill were in Herbology, the HTML source of the &#39;Skills&#39; row would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Skills:&lt;/td&gt;\r\n      &lt;td&gt;&lt;select name=&quot;skills&quot; multiple=&quot;true&quot;&gt;\r\n          &lt;option value=&quot;Potions&quot;&gt;Potions&lt;/option&gt;\r\n          &lt;option value=&quot;Herbology&quot; selected=&quot;selected&quot;&gt;Herbology&lt;/option&gt;\r\n          &lt;option value=&quot;Quidditch&quot;&gt;Quidditch&lt;/option&gt;&lt;/select&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n','2014-02-17 15:29:52',NULL,NULL,0,0,0,0,'log','leonliusha'),(9,1,'The option tag','<p style=\"text-align:start\">This tag renders an HTML &#39;option&#39;. It sets &#39;selected&#39; as appropriate based on the bound value.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;House:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;form:select path=&quot;house&quot;&gt;\r\n              &lt;form:option value=&quot;Gryffindor&quot;/&gt;\r\n              &lt;form:option value=&quot;Hufflepuff&quot;/&gt;\r\n              &lt;form:option value=&quot;Ravenclaw&quot;/&gt;\r\n              &lt;form:option value=&quot;Slytherin&quot;/&gt;\r\n          &lt;/form:select&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p style=\"text-align:start\">If the <code>User&#39;s</code> house was in Gryffindor, the HTML source of the &#39;House&#39; row would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;House:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;select name=&quot;house&quot;&gt;\r\n              &lt;option value=&quot;Gryffindor&quot; selected=&quot;selected&quot;&gt;Gryffindor&lt;/option&gt;\r\n              &lt;option value=&quot;Hufflepuff&quot;&gt;Hufflepuff&lt;/option&gt;\r\n              &lt;option value=&quot;Ravenclaw&quot;&gt;Ravenclaw&lt;/option&gt;\r\n              &lt;option value=&quot;Slytherin&quot;&gt;Slytherin&lt;/option&gt;\r\n          &lt;/select&gt;\r\n      &lt;/td&gt;\r\n   &lt;/tr&gt;</pre>\r\n','2014-02-17 15:30:12',NULL,NULL,0,0,0,0,'log','leonliusha'),(10,1,'The options tag','<p style=\"text-align:start\">This tag renders a list of HTML &#39;option&#39; tags. It sets the &#39;selected&#39; attribute as appropriate based on the bound value.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Country:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;form:select path=&quot;country&quot;&gt;\r\n              &lt;form:option value=&quot;-&quot; label=&quot;--Please Select&quot;/&gt;\r\n              &lt;form:options items=&quot;${countryList}&quot; itemValue=&quot;code&quot; itemLabel=&quot;name&quot;/&gt;\r\n          &lt;/form:select&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p style=\"text-align:start\">If the <code>User</code> lived in the UK, the HTML source of the &#39;Country&#39; row would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Country:&lt;/td&gt;\r\n      &lt;td&gt;\r\n          &lt;select name=&quot;country&quot;&gt;\r\n              &lt;option value=&quot;-&quot;&gt;--Please Select&lt;/option&gt;\r\n              &lt;option value=&quot;AT&quot;&gt;Austria&lt;/option&gt;\r\n              &lt;option value=&quot;UK&quot; selected=&quot;selected&quot;&gt;United Kingdom&lt;/option&gt;\r\n              &lt;option value=&quot;US&quot;&gt;United States&lt;/option&gt;\r\n          &lt;/select&gt;\r\n      &lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n\r\n<p style=\"text-align:start\">As the example shows, the combined usage of an <code>option</code> tag with the <code>options</code> tag generates the same standard HTML, but allows you to explicitly specify a value in the JSP that is for display only (where it belongs) such as the default string in the example: &quot;-- Please Select&quot;.</p>\r\n\r\n<p style=\"text-align:start\">The <code>items</code> attribute is typically populated with a collection or array of item objects. <code>itemValue</code> and <code>itemLabel</code> simply refer to bean properties of those item objects, if specified; otherwise, the item objects themselves will be stringified. Alternatively, you may specify a <code>Map</code> of items, in which case the map keys are interpreted as option values and the map values correspond to option labels. If <code>itemValue</code> and/or <code>itemLabel</code> happen to be specified as well, the item value property will apply to the map key and the item label property will apply to the map value.</p>\r\n','2014-02-17 15:30:28',NULL,NULL,0,0,0,0,'log','leonliusha'),(11,1,' The textarea tag','<p style=\"text-align:start\">his tag renders an HTML &#39;textarea&#39;.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;tr&gt;\r\n      &lt;td&gt;Notes:&lt;/td&gt;\r\n      &lt;td&gt;&lt;form:textarea path=&quot;notes&quot; rows=&quot;3&quot; cols=&quot;20&quot; /&gt;&lt;/td&gt;\r\n      &lt;td&gt;&lt;form:errors path=&quot;notes&quot; /&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;</pre>\r\n','2014-02-17 15:30:40',NULL,NULL,0,0,0,0,'log','leonliusha'),(12,1,'The hidden tag','<p style=\"text-align:start\">This tag renders an HTML &#39;input&#39; tag with type &#39;hidden&#39; using the bound value. To submit an unbound hidden value, use the HTML <code>input</code> tag with type &#39;hidden&#39;.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form:hidden path=&quot;house&quot; /&gt;\r\n  </pre>\r\n\r\n<p style=\"text-align:start\">If we choose to submit the &#39;house&#39; value as a hidden one, the HTML would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;input name=&quot;house&quot; type=&quot;hidden&quot; value=&quot;Gryffindor&quot;/&gt;</pre>\r\n','2014-02-17 15:30:53',NULL,NULL,0,0,0,0,'log','leonliusha'),(13,1,' The errors tag','<p style=\"text-align:start\">This tag renders field errors in an HTML &#39;span&#39; tag. It provides access to the errors created in your controller or those that were created by any validators associated with your controller.</p>\r\n\r\n<p style=\"text-align:start\">Let&#39;s assume we want to display all error messages for the <code>firstName</code> and <code>lastName</code> fields once we submit the form. We have a validator for instances of the <code>User</code> class called <code>UserValidator</code>.</p>\r\n\r\n<pre style=\"text-align:start\">\r\npublic class UserValidator implements Validator {\r\n\r\n      public boolean supports(Class candidate) {\r\n          return User.class.isAssignableFrom(candidate);\r\n      }\r\n\r\n      public void validate(Object obj, Errors errors) {\r\n          ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;firstName&quot;, &quot;required&quot;, &quot;Field is required.&quot;);\r\n          ValidationUtils.rejectIfEmptyOrWhitespace(errors, &quot;lastName&quot;, &quot;required&quot;, &quot;Field is required.&quot;);\r\n      }\r\n  }</pre>\r\n\r\n<p style=\"text-align:start\">The <code>form.jsp</code> would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form:form&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n              &lt;%-- Show errors for firstName field --%&gt;\r\n              &lt;td&gt;&lt;form:errors path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;lastName&quot; /&gt;&lt;/td&gt;\r\n              &lt;%-- Show errors for lastName field --%&gt;\r\n              &lt;td&gt;&lt;form:errors path=&quot;lastName&quot;  /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;3&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n\r\n<p style=\"text-align:start\">If we submit a form with empty values in the <code>firstName</code> and <code>lastName</code> fields, this is what the HTML would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form method=&quot;POST&quot;&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;input name=&quot;firstName&quot; type=&quot;text&quot; value=&quot;&quot;/&gt;&lt;/td&gt;\r\n              &lt;%-- Associated errors to firstName field displayed --%&gt;\r\n              &lt;td&gt;&lt;span name=&quot;firstName.errors&quot;&gt;Field is required.&lt;/span&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;input name=&quot;lastName&quot; type=&quot;text&quot; value=&quot;&quot;/&gt;&lt;/td&gt;\r\n              &lt;%-- Associated errors to lastName field displayed --%&gt;\r\n              &lt;td&gt;&lt;span name=&quot;lastName.errors&quot;&gt;Field is required.&lt;/span&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;3&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form&gt;</pre>\r\n\r\n<p style=\"text-align:start\">What if we want to display the entire list of errors for a given page? The example below shows that the <code>errors</code> tag also supports some basic wildcarding functionality.</p>\r\n\r\n<div style=\"background-color: inherit; color: rgb(35, 70, 35); font-family: 微软雅黑; font-size: 24px; font-style: normal; font-variant: normal; font-weight: bold; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">\r\n<ul>\r\n	<li>\r\n	<p><code>path=&quot;*&quot;</code> - displays all errors</p>\r\n	</li>\r\n	<li>\r\n	<p><code>path=&quot;lastName&quot;</code> - displays all errors associated with the <code>lastName</code> field</p>\r\n	</li>\r\n</ul>\r\n</div>\r\n\r\n<p style=\"text-align:start\">The example below will display a list of errors at the top of the page, followed by field-specific errors next to the fields:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form:form&gt;\r\n      &lt;form:errors path=&quot;*&quot; cssClass=&quot;errorBox&quot; /&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:errors path=&quot;firstName&quot; /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:input path=&quot;lastName&quot; /&gt;&lt;/td&gt;\r\n              &lt;td&gt;&lt;form:errors path=&quot;lastName&quot;  /&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;3&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n      &lt;/table&gt;\r\n  &lt;/form:form&gt;</pre>\r\n\r\n<p style=\"text-align:start\">The HTML would look like:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form method=&quot;POST&quot;&gt;\r\n      &lt;span name=&quot;*.errors&quot; class=&quot;errorBox&quot;&gt;Field is required.&lt;br/&gt;Field is required.&lt;/span&gt;\r\n      &lt;table&gt;\r\n          &lt;tr&gt;\r\n              &lt;td&gt;First Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;input name=&quot;firstName&quot; type=&quot;text&quot; value=&quot;&quot;/&gt;&lt;/td&gt;\r\n              &lt;td&gt;&lt;span name=&quot;firstName.errors&quot;&gt;Field is required.&lt;/span&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n\r\n          &lt;tr&gt;\r\n              &lt;td&gt;Last Name:&lt;/td&gt;\r\n              &lt;td&gt;&lt;input name=&quot;lastName&quot; type=&quot;text&quot; value=&quot;&quot;/&gt;&lt;/td&gt;\r\n              &lt;td&gt;&lt;span name=&quot;lastName.errors&quot;&gt;Field is required.&lt;/span&gt;&lt;/td&gt;\r\n          &lt;/tr&gt;\r\n          &lt;tr&gt;\r\n              &lt;td colspan=&quot;3&quot;&gt;\r\n                  &lt;input type=&quot;submit&quot; value=&quot;Save Changes&quot; /&gt;\r\n              &lt;/td&gt;\r\n          &lt;/tr&gt;\r\n  &lt;/form&gt;</pre>\r\n','2014-02-17 15:31:13',NULL,NULL,0,0,0,0,'log','leonliusha'),(14,1,'HTTP Method Conversion','<p style=\"text-align:start\">A key principle of REST is the use of the Uniform Interface. This means that all resources (URLs) can be manipulated using the same four HTTP methods: GET, PUT, POST, and DELETE. For each method, the HTTP specification defines the exact semantics. For instance, a GET should always be a safe operation, meaning that is has no side effects, and a PUT or DELETE should be idempotent, meaning that you can repeat these operations over and over again, but the end result should be the same. While HTTP defines these four methods, HTML only supports two: GET and POST. Fortunately, there are two possible workarounds: you can either use JavaScript to do your PUT or DELETE, or simply do a POST with the &#39;real&#39; method as an additional parameter (modeled as a hidden input field in an HTML form). This latter trick is what Spring&#39;s <code>HiddenHttpMethodFilter</code> does. This filter is a plain Servlet Filter and therefore it can be used in combination with any web framework (not just Spring MVC). Simply add this filter to your web.xml, and a POST with a hidden _method parameter will be converted into the corresponding HTTP method request.</p>\r\n\r\n<p style=\"text-align:start\">To support HTTP method conversion the Spring MVC form tag was updated to support setting the HTTP method. For example, the following snippet taken from the updated Petclinic sample</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;form:form method=&quot;delete&quot;&gt;\r\n      &lt;p class=&quot;submit&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Delete Pet&quot;/&gt;&lt;/p&gt;\r\n&lt;/form:form&gt;</pre>\r\n\r\n<p style=\"text-align:start\">This will actually perform an HTTP POST, with the &#39;real&#39; DELETE method hidden behind a request parameter, to be picked up by the<code>HiddenHttpMethodFilter</code>, as defined in web.xml:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;filter&gt;\r\n    &lt;filter-name&gt;httpMethodFilter&lt;/filter-name&gt;\r\n    &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt;\r\n&lt;/filter&gt;\r\n\r\n&lt;filter-mapping&gt;\r\n    &lt;filter-name&gt;httpMethodFilter&lt;/filter-name&gt;\r\n    &lt;servlet-name&gt;petclinic&lt;/servlet-name&gt;\r\n&lt;/filter-mapping&gt;</pre>\r\n\r\n<p style=\"text-align:start\">The corresponding @Controller method is shown below:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n@RequestMapping(method = RequestMethod.DELETE)\r\npublic String deletePet(@PathVariable int ownerId, @PathVariable int petId) {\r\n  this.clinic.deletePet(petId);\r\n  return &quot;redirect:/owners/&quot; + ownerId;\r\n}</pre>\r\n','2014-02-17 15:31:33',NULL,NULL,0,0,0,0,'log','leonliusha'),(15,1,'UrlBasedViewResolver','<p style=\"text-align:start\">The <code>UrlBasedViewResolver</code> instantiates the given <code>viewClass</code> for each view it has to resolve.</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;\r\n  &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.tiles2.TilesView&quot;/&gt;\r\n&lt;/bean&gt;</pre>\r\n','2014-02-17 15:32:07',NULL,NULL,0,0,0,0,'log','leonliusha'),(16,1,' ResourceBundleViewResolver','<p style=\"text-align:start\">The <code>ResourceBundleViewResolver</code> has to be provided with a property file containing viewnames and viewclasses the resolver can use:</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.ResourceBundleViewResolver&quot;&gt;\r\n  &lt;property name=&quot;basename&quot; value=&quot;views&quot;/&gt;\r\n&lt;/bean&gt;</pre>\r\n\r\n<pre style=\"text-align:start\">\r\n...\r\nwelcomeView.(class)=org.springframework.web.servlet.view.tiles2.TilesView\r\nwelcomeView.url=welcome (this is the name of a Tiles definition)\r\n\r\nvetsView.(class)=org.springframework.web.servlet.view.tiles2.TilesView\r\nvetsView.url=vetsView (again, this is the name of a Tiles definition)\r\n\r\nfindOwnersForm.(class)=org.springframework.web.servlet.view.JstlView\r\nfindOwnersForm.url=/WEB-INF/jsp/findOwners.jsp\r\n...</pre>\r\n\r\n<p style=\"text-align:start\">As you can see, when using the <code>ResourceBundleViewResolver</code>, you can easily mix different view technologies.</p>\r\n\r\n<p style=\"text-align:start\">Note that the <code>TilesView</code> class for Tiles 2 supports JSTL (the JSP Standard Tag Library) out of the box, whereas there is a separate <code>TilesJstlView</code> subclass in the Tiles 1.x support.</p>\r\n','2014-02-17 15:32:25',NULL,NULL,0,0,0,0,'log','leonliusha'),(17,1,'SimpleSpringPreparerFactory ','<p style=\"text-align:start\">As an advanced feature, Spring also supports two special Tiles 2<code>PreparerFactory</code> implementations. Check out the Tiles documentation for details on how to use <code>ViewPreparer</code> references in your Tiles definition files.</p>\r\n\r\n<p style=\"text-align:start\">Specify <code>SimpleSpringPreparerFactory</code> to autowire ViewPreparer instances based on specified preparer classes, applying Spring&#39;s container callbacks as well as applying configured Spring BeanPostProcessors. If Spring&#39;s context-wide annotation-config has been activated, annotations in ViewPreparer classes will be automatically detected and applied. Note that this expects preparer <em>classes</em> in the Tiles definition files, just like the default <code>PreparerFactory</code> does.</p>\r\n\r\n<p style=\"text-align:start\">Specify <code>SpringBeanPreparerFactory</code> to operate on specified preparer <em>names</em> instead of classes, obtaining the corresponding Spring bean from the DispatcherServlet&#39;s application context. The full bean creation process will be in the control of the Spring application context in this case, allowing for the use of explicit dependency injection configuration, scoped beans etc. Note that you need to define one Spring bean definition per preparer name (as used in your Tiles definitions).</p>\r\n\r\n<pre style=\"text-align:start\">\r\n&lt;bean id=&quot;tilesConfigurer&quot; class=&quot;org.springframework.web.servlet.view.tiles2.TilesConfigurer&quot;&gt;\r\n  &lt;property name=&quot;definitions&quot;&gt;\r\n    &lt;list&gt;\r\n      &lt;value&gt;/WEB-INF/defs/general.xml&lt;/value&gt;\r\n      &lt;value&gt;/WEB-INF/defs/widgets.xml&lt;/value&gt;\r\n      &lt;value&gt;/WEB-INF/defs/administrator.xml&lt;/value&gt;\r\n      &lt;value&gt;/WEB-INF/defs/customer.xml&lt;/value&gt;\r\n      &lt;value&gt;/WEB-INF/defs/templates.xml&lt;/value&gt;\r\n    &lt;/list&gt;\r\n  &lt;/property&gt;\r\n\r\n  &lt;!-- resolving preparer names as Spring bean definition names --&gt;\r\n  &lt;property name=&quot;preparerFactoryClass&quot;\r\n       value=&quot;org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory&quot;/&gt;\r\n\r\n&lt;/bean&gt;</pre>\r\n','2014-02-17 15:33:35',NULL,NULL,0,0,0,0,'log','leonliusha'),(18,1,'Why using Executors','<p>Executors will helps the thread user to manage the lift cycle of thread.And more than that, user is able to catch the exception that throwed by thread.</p>\r\n','2014-03-31 13:24:40',NULL,NULL,0,0,0,0,'log','leonliusha');
/*!40000 ALTER TABLE `messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `questions` (
  `question_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `title` varchar(50) NOT NULL,
  `text` blob NOT NULL,
  `create_date` datetime NOT NULL,
  `update_date` datetime DEFAULT NULL,
  `tags` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`question_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `questions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(30) NOT NULL,
  `password` varchar(30) NOT NULL,
  `email` varchar(100) NOT NULL,
  `first_name` varchar(50) DEFAULT NULL,
  `last_name` varchar(50) NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'leonliusha','19830421','leonliusha@gmail.com','sha','liu'),(2,'jiaojiao','19820812','jiaojiaokelly@hotmail.com','jiao','jiao');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2014-06-07  0:35:44
